From e667b262eed4bddc97e29bb51b10106ae0f8e6d8 Mon Sep 17 00:00:00 2001
From: Andrii Anisov <andrii.anisov@globallogic.com>
Date: Sun, 6 Dec 2015 17:22:11 +0200
Subject: [PATCH 4/6] alsa-lib: Add a fix for PCM xrun issue.

Signed-off-by: Andrii Anisov <andrii.anisov@globallogic.com>
---
 bin/build-core-sdk.sh                              |   4 +
 ...001-alsa-lib-Add-a-fix-for-PCM-xrun-issue.patch | 260 +++++++++++++++++++++
 2 files changed, 264 insertions(+)
 create mode 100644 patch/oe-core/0001-alsa-lib-Add-a-fix-for-PCM-xrun-issue.patch

diff --git a/bin/build-core-sdk.sh b/bin/build-core-sdk.sh
index 1d2806f..9dedae3 100755
--- a/bin/build-core-sdk.sh
+++ b/bin/build-core-sdk.sh
@@ -29,6 +29,10 @@ echo "[GLSDK]> Applying patches on meta-ti"
 cd ${GLSDK}/yocto-layers/sources/meta-ti
 git am ${GLSDK}/patch/meta-ti/*.patch
 
+echo "[GLSDK]> Applying patches on oe-core"
+cd ${GLSDK}/yocto-layers/sources/oe-core
+git am ${GLSDK}/patch/oe-core/*.patch
+
 cd $GLSDK/yocto-layers
 
 echo "[GLSDK]> cd build"
diff --git a/patch/oe-core/0001-alsa-lib-Add-a-fix-for-PCM-xrun-issue.patch b/patch/oe-core/0001-alsa-lib-Add-a-fix-for-PCM-xrun-issue.patch
new file mode 100644
index 0000000..891110a
--- /dev/null
+++ b/patch/oe-core/0001-alsa-lib-Add-a-fix-for-PCM-xrun-issue.patch
@@ -0,0 +1,260 @@
+From 91a3569124e2b0a43068866149521ec02d8423d8 Mon Sep 17 00:00:00 2001
+From: Oleksandr Baglei <oleksandr.baglei@globallogic.com>
+Date: Sun, 6 Dec 2015 17:00:32 +0200
+Subject: [PATCH 2/2] alsa-lib: Add a fix for PCM xrun issue.
+
+Signed-off-by: Oleksandr Baglei <oleksandr.baglei@globallogic.com>
+---
+ ...e_PCM_xrun_and_unexpected_states_properly.patch |  227 ++++++++++++++++++++
+ meta/recipes-multimedia/alsa/alsa-lib_1.0.27.2.bb  |    1 +
+ 2 files changed, 228 insertions(+)
+ create mode 100644 meta/recipes-multimedia/alsa/alsa-lib/pcm_dmix__Handle_slave_PCM_xrun_and_unexpected_states_properly.patch
+
+diff --git a/meta/recipes-multimedia/alsa/alsa-lib/pcm_dmix__Handle_slave_PCM_xrun_and_unexpected_states_properly.patch b/meta/recipes-multimedia/alsa/alsa-lib/pcm_dmix__Handle_slave_PCM_xrun_and_unexpected_states_properly.patch
+new file mode 100644
+index 0000000..ec5d0d6
+--- /dev/null
++++ b/meta/recipes-multimedia/alsa/alsa-lib/pcm_dmix__Handle_slave_PCM_xrun_and_unexpected_states_properly.patch
+@@ -0,0 +1,227 @@
++From 8985742d91dbdd74b2f605374207473393454fff Mon Sep 17 00:00:00 2001
++From: Takashi Iwai <tiwai@suse.de>
++Date: Fri, 30 Oct 2015 17:13:50 +0100
++Subject: [PATCH] pcm: dmix: Handle slave PCM xrun and unexpected states
++ properly
++
++Currently, dmix & co plugins ignore the XRUN state of the slave PCM.
++It's (supposedly) because dmix deals with the PCM in a free-wheel
++mode, which is equivalent with XRUN.  But, this difference (whether
++the correct freewheel or XRUN) should be done by the kernel, and we
++may have an XRUN state indeed (e.g. via xrun injection).
++
++This patch fixes this lack of behavior, to handle PCM xrun and does
++prepare when the slave PCM is in such a state.
++
++Also, the patch consolidates the prepare callback for all dmix, dsnoop
++and dshare plugins, and fix/cleanup a bit for dshare/dsnoop codes to
++align with dsnoop code.
++
++Signed-off-by: Takashi Iwai <tiwai@suse.de>
++---
++ src/pcm/pcm_direct.c | 22 ++++++++++++++++++++++
++ src/pcm/pcm_direct.h |  3 +++
++ src/pcm/pcm_dmix.c   | 16 +++-------------
++ src/pcm/pcm_dshare.c | 22 +++++++---------------
++ src/pcm/pcm_dsnoop.c | 23 +++++++----------------
++ 5 files changed, 42 insertions(+), 44 deletions(-)
++
++diff --git a/src/pcm/pcm_direct.c b/src/pcm/pcm_direct.c
++index 195fddf..fd3877c 100644
++--- a/src/pcm/pcm_direct.c
+++++ b/src/pcm/pcm_direct.c
++@@ -807,6 +807,28 @@ int snd_pcm_direct_set_chmap(snd_pcm_t *pcm, const snd_pcm_chmap_t *map)
++ 	return snd_pcm_set_chmap(dmix->spcm, map);
++ }
++ 
+++int snd_pcm_direct_prepare(snd_pcm_t *pcm)
+++{
+++	snd_pcm_direct_t *dmix = pcm->private_data;
+++	int err;
+++
+++	switch (snd_pcm_state(dmix->spcm)) {
+++	case SND_PCM_STATE_XRUN:
+++	case SND_PCM_STATE_SUSPENDED:
+++	case SND_PCM_STATE_DISCONNECTED:
+++		err = snd_pcm_prepare(dmix->spcm);
+++		if (err < 0)
+++			return err;
+++		snd_pcm_start(dmix->spcm);
+++		break;
+++	}
+++	snd_pcm_direct_check_interleave(dmix, pcm);
+++	dmix->state = SND_PCM_STATE_PREPARED;
+++	dmix->appl_ptr = dmix->last_appl_ptr = 0;
+++	dmix->hw_ptr = 0;
+++	return snd_pcm_direct_set_timer_params(dmix);
+++}
+++
++ int snd_pcm_direct_resume(snd_pcm_t *pcm)
++ {
++ 	snd_pcm_direct_t *dmix = pcm->private_data;
++diff --git a/src/pcm/pcm_direct.h b/src/pcm/pcm_direct.h
++index 9b1ddbc..611ad29 100644
++--- a/src/pcm/pcm_direct.h
+++++ b/src/pcm/pcm_direct.h
++@@ -224,6 +224,8 @@ struct snd_pcm_direct {
++ 	snd1_pcm_direct_mmap
++ #define snd_pcm_direct_munmap \
++ 	snd1_pcm_direct_munmap
+++#define snd_pcm_direct_prepare \
+++	snd1_pcm_direct_prepare
++ #define snd_pcm_direct_resume \
++ 	snd1_pcm_direct_resume
++ #define snd_pcm_direct_timer_stop \
++@@ -304,6 +306,7 @@ int snd_pcm_direct_sw_params(snd_pcm_t *pcm, snd_pcm_sw_params_t * params);
++ int snd_pcm_direct_channel_info(snd_pcm_t *pcm, snd_pcm_channel_info_t * info);
++ int snd_pcm_direct_mmap(snd_pcm_t *pcm);
++ int snd_pcm_direct_munmap(snd_pcm_t *pcm);
+++int snd_pcm_direct_prepare(snd_pcm_t *pcm);
++ int snd_pcm_direct_resume(snd_pcm_t *pcm);
++ int snd_pcm_direct_timer_stop(snd_pcm_direct_t *dmix);
++ void snd_pcm_direct_clear_timer_queue(snd_pcm_direct_t *dmix);
++diff --git a/src/pcm/pcm_dmix.c b/src/pcm/pcm_dmix.c
++index 58e4975..b26a5c7 100644
++--- a/src/pcm/pcm_dmix.c
+++++ b/src/pcm/pcm_dmix.c
++@@ -450,9 +450,10 @@ static snd_pcm_state_t snd_pcm_dmix_state(snd_pcm_t *pcm)
++ 	snd_pcm_state_t state;
++ 	state = snd_pcm_state(dmix->spcm);
++ 	switch (state) {
+++	case SND_PCM_STATE_XRUN:
++ 	case SND_PCM_STATE_SUSPENDED:
++-		return state;
++ 	case SND_PCM_STATE_DISCONNECTED:
+++		dmix->state = state;
++ 		return state;
++ 	default:
++ 		break;
++@@ -533,17 +534,6 @@ static int snd_pcm_dmix_hwsync(snd_pcm_t *pcm)
++ 	}
++ }
++ 
++-static int snd_pcm_dmix_prepare(snd_pcm_t *pcm)
++-{
++-	snd_pcm_direct_t *dmix = pcm->private_data;
++-
++-	snd_pcm_direct_check_interleave(dmix, pcm);
++-	dmix->state = SND_PCM_STATE_PREPARED;
++-	dmix->appl_ptr = dmix->last_appl_ptr = 0;
++-	dmix->hw_ptr = 0;
++-	return snd_pcm_direct_set_timer_params(dmix);
++-}
++-
++ static void reset_slave_ptr(snd_pcm_t *pcm, snd_pcm_direct_t *dmix)
++ {
++ 	dmix->slave_appl_ptr = dmix->slave_hw_ptr = *dmix->spcm->hw.ptr;
++@@ -920,7 +910,7 @@ static const snd_pcm_fast_ops_t snd_pcm_dmix_fast_ops = {
++ 	.state = snd_pcm_dmix_state,
++ 	.hwsync = snd_pcm_dmix_hwsync,
++ 	.delay = snd_pcm_dmix_delay,
++-	.prepare = snd_pcm_dmix_prepare,
+++	.prepare = snd_pcm_direct_prepare,
++ 	.reset = snd_pcm_dmix_reset,
++ 	.start = snd_pcm_dmix_start,
++ 	.drop = snd_pcm_dmix_drop,
++diff --git a/src/pcm/pcm_dshare.c b/src/pcm/pcm_dshare.c
++index 02370dc..58e47bb 100644
++--- a/src/pcm/pcm_dshare.c
+++++ b/src/pcm/pcm_dshare.c
++@@ -237,11 +237,14 @@ static int snd_pcm_dshare_status(snd_pcm_t *pcm, snd_pcm_status_t * status)
++ static snd_pcm_state_t snd_pcm_dshare_state(snd_pcm_t *pcm)
++ {
++ 	snd_pcm_direct_t *dshare = pcm->private_data;
++-	switch (snd_pcm_state(dshare->spcm)) {
+++	snd_pcm_state_t state;
+++	state = snd_pcm_state(dshare->spcm);
+++	switch (state) {
+++	case SND_PCM_STATE_XRUN:
++ 	case SND_PCM_STATE_SUSPENDED:
++-		return SND_PCM_STATE_SUSPENDED;
++ 	case SND_PCM_STATE_DISCONNECTED:
++-		return SND_PCM_STATE_DISCONNECTED;
+++		dshare->state = state;
+++		return state;
++ 	default:
++ 		break;
++ 	}
++@@ -296,17 +299,6 @@ static int snd_pcm_dshare_hwsync(snd_pcm_t *pcm)
++ 	}
++ }
++ 
++-static int snd_pcm_dshare_prepare(snd_pcm_t *pcm)
++-{
++-	snd_pcm_direct_t *dshare = pcm->private_data;
++-
++-	snd_pcm_direct_check_interleave(dshare, pcm);
++-	dshare->state = SND_PCM_STATE_PREPARED;
++-	dshare->appl_ptr = dshare->last_appl_ptr = 0;
++-	dshare->hw_ptr = 0;
++-	return snd_pcm_direct_set_timer_params(dshare);
++-}
++-
++ static int snd_pcm_dshare_reset(snd_pcm_t *pcm)
++ {
++ 	snd_pcm_direct_t *dshare = pcm->private_data;
++@@ -595,7 +587,7 @@ static const snd_pcm_fast_ops_t snd_pcm_dshare_fast_ops = {
++ 	.state = snd_pcm_dshare_state,
++ 	.hwsync = snd_pcm_dshare_hwsync,
++ 	.delay = snd_pcm_dshare_delay,
++-	.prepare = snd_pcm_dshare_prepare,
+++	.prepare = snd_pcm_direct_prepare,
++ 	.reset = snd_pcm_dshare_reset,
++ 	.start = snd_pcm_dshare_start,
++ 	.drop = snd_pcm_dshare_drop,
++diff --git a/src/pcm/pcm_dsnoop.c b/src/pcm/pcm_dsnoop.c
++index 8a2e87a..576c35b 100644
++--- a/src/pcm/pcm_dsnoop.c
+++++ b/src/pcm/pcm_dsnoop.c
++@@ -201,12 +201,14 @@ static int snd_pcm_dsnoop_status(snd_pcm_t *pcm, snd_pcm_status_t * status)
++ static snd_pcm_state_t snd_pcm_dsnoop_state(snd_pcm_t *pcm)
++ {
++ 	snd_pcm_direct_t *dsnoop = pcm->private_data;
++-	switch (snd_pcm_state(dsnoop->spcm)) {
+++	snd_pcm_state_t state;
+++	state = snd_pcm_state(dsnoop->spcm);
+++	switch (state) {
+++	case SND_PCM_STATE_XRUN:
++ 	case SND_PCM_STATE_SUSPENDED:
++-		return SND_PCM_STATE_SUSPENDED;
++ 	case SND_PCM_STATE_DISCONNECTED:
++-		dsnoop->state = SNDRV_PCM_STATE_DISCONNECTED;
++-		return -ENODEV;
+++		dsnoop->state = state;
+++		return state;
++ 	default:
++ 		break;
++ 	}
++@@ -258,17 +260,6 @@ static int snd_pcm_dsnoop_hwsync(snd_pcm_t *pcm)
++ 	}
++ }
++ 
++-static int snd_pcm_dsnoop_prepare(snd_pcm_t *pcm)
++-{
++-	snd_pcm_direct_t *dsnoop = pcm->private_data;
++-
++-	snd_pcm_direct_check_interleave(dsnoop, pcm);
++-	dsnoop->state = SND_PCM_STATE_PREPARED;
++-	dsnoop->appl_ptr = 0;
++-	dsnoop->hw_ptr = 0;
++-	return snd_pcm_direct_set_timer_params(dsnoop);
++-}
++-
++ static int snd_pcm_dsnoop_reset(snd_pcm_t *pcm)
++ {
++ 	snd_pcm_direct_t *dsnoop = pcm->private_data;
++@@ -497,7 +488,7 @@ static const snd_pcm_fast_ops_t snd_pcm_dsnoop_fast_ops = {
++ 	.state = snd_pcm_dsnoop_state,
++ 	.hwsync = snd_pcm_dsnoop_hwsync,
++ 	.delay = snd_pcm_dsnoop_delay,
++-	.prepare = snd_pcm_dsnoop_prepare,
+++	.prepare = snd_pcm_direct_prepare,
++ 	.reset = snd_pcm_dsnoop_reset,
++ 	.start = snd_pcm_dsnoop_start,
++ 	.drop = snd_pcm_dsnoop_drop,
++-- 
++1.7.11.7
++
+diff --git a/meta/recipes-multimedia/alsa/alsa-lib_1.0.27.2.bb b/meta/recipes-multimedia/alsa/alsa-lib_1.0.27.2.bb
+index cbe0448..3d4f73c 100644
+--- a/meta/recipes-multimedia/alsa/alsa-lib_1.0.27.2.bb
++++ b/meta/recipes-multimedia/alsa/alsa-lib_1.0.27.2.bb
+@@ -18,6 +18,7 @@ SRC_URI = "ftp://ftp.alsa-project.org/pub/lib/alsa-lib-${PV}.tar.bz2 \
+            file://Check-if-wordexp-function-is-supported.patch \
+            file://fix-tstamp-declaration.patch \
+            file://Update-iatomic.h-functions-definitions-for-mips.patch \
++           file://pcm_dmix__Handle_slave_PCM_xrun_and_unexpected_states_properly.patch \
+           "
+ SRC_URI[md5sum] = "69129a7c37697f81ac092335e9fa452b"
+ SRC_URI[sha256sum] = "690ed393e7efd4fc7e3a2d2cda5449298ca0c895197e5914e350882012430d19"
+-- 
+1.7.9.5
+
-- 
2.8.3

